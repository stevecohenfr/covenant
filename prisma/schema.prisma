generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String?
  name          String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // gating: number of public collabs (denormalized for fast checks)
  publicCount Int @default(0)

  // relations
  profile Profile?
  collabs Collab[]

  // auth provider accounts if you add OAuth later
  sessions      Session[]
  accounts      Account[]
  PipelineEvent PipelineEvent[]
}

model Profile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  country   String?
  languages String[] // ["fr","en"]
  bio       String?

  // social stats (simple MVP)
  instagram   String? // handle
  igFollowers Int? // snapshot
  youtube     String?
  ytFollowers Int?
  tiktok      String?
  ttFollowers Int?
}

model Brand {
  id       String       @id @default(cuid())
  name     String       @unique
  website  String?
  country  String?
  tags     TagOnBrand[]
  contacts Contact[]

  collabs Collab[]

  @@index([name])
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  collabs Collab[]
}

model Contact {
  id       String  @id @default(cuid())
  brand    Brand   @relation(fields: [brandId], references: [id])
  brandId  String
  email    String
  phone    String?
  language String? // communication language
  role     String? // PR, marketing…
  verified Boolean @default(false)
}

model Tag {
  id    String @id @default(cuid())
  slug  String @unique
  label String

  brands  TagOnBrand[]
  collabs TagOnCollab[]
}

model TagOnBrand {
  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String

  @@id([brandId, tagId])
}

model TagOnCollab {
  collab   Collab @relation(fields: [collabId], references: [id])
  collabId String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String

  @@id([collabId, tagId])
}

model Collab {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId String

  product  String

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?

  // publication / gating
  isCompleted Boolean   @default(false)
  isPublic    Boolean   @default(false)
  completedAt DateTime?

  // negotiation & contract
  contractSigned        Boolean @default(false)
  negotiatedPrice       Boolean @default(false)
  accessoriesNegotiated Boolean @default(false)
  accessoriesDetails    String?

  // deliverables & rights
  deliverables      Json? // {platforms:["yt","ig"], items:[{type:"video",count:1}]}
  usagePaidMedia    Boolean?
  usageDuration     String?
  usageRegions      String[]
  exclusivityUntil  DateTime?

  // money
  currency      String? // "EUR"
  amount        Int? // store cents
  paid          Boolean   @default(false)
  paidAt        DateTime?
  paymentMethod String? // wire, paypal, …
  paymentTerms  String? // e.g. Net30

  // communication
  language     String? // fr, en…
  country      String?
  contactEmail String?
  contactPhone String?

  // status pipeline
  status CollabStatus @default(PROSPECTION)

  // links & notes
  publicationLinks String[] // URLs
  comment          String?
  privateNotes     String?

  // tags
  tags TagOnCollab[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pipelineEvents PipelineEvent[]
  attachments    Attachment[]

  @@index([userId])
  @@index([brandId])
  @@index([isPublic])
  @@index([status])
}

enum CollabStatus {
  PROSPECTION
  WAITING_REPLY
  NEGOTIATION
  AGREED
  WAITING_PRODUCT
  PRODUCTION
  IN_REVIEW
  PUBLISHED
  INVOICED
  WAITING_PAYMENT
  PAID
  CLOSED
}

model PipelineEvent {
  id        String        @id @default(cuid())
  collab    Collab        @relation(fields: [collabId], references: [id])
  collabId  String
  from      CollabStatus?
  to        CollabStatus
  note      String?
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
}

model Attachment {
  id        String   @id @default(cuid())
  collab    Collab   @relation(fields: [collabId], references: [id])
  collabId  String
  kind      String // contract, invoice, brief
  url       String // signed URL provider dependent
  createdAt DateTime @default(now())
}

model Invite {
  id        String    @id @default(cuid())
  email     String    @unique
  code      String    @unique
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  usedAt    DateTime?
}

// --- NextAuth tables (simple)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
